
[white]
[bottom-right]
[font=Sans 24px]

--- [01-racks.jpg]
Bare Metal Provisioning
with Ansible and Cobbler

Felix Frank
(@felis_rex)

The unbelievable
Machine Company

--- [02-hadoop.jpg]

--- [03-satellite.jpg]
SUSE Linux

SUSE Manager

--- [04-stack.jpg]
Provisioning Stack

Cobbler

HPE ProLiant Gen10

VMWARE + TODO?

--- [05-stack.jpg] 
Platform Stack

FreeIPA
 - DNS
 - LDAP

Kerberos + TODO

--- [06-infra.jpg]
Aside:

IP address management

--- [07-nipap.png] [right] [font=Sans 32px]
Introducing
NIPAP

--- [07-branches.jpg] [left] [font=monospace 24px]
  Hierarchical subnet planning in NIPAP

  - 10.139.0.0/19                           Subnet for Berlin location

    - 10.139.0.0/20                         Location DC Berlin 01

      + 10.139.0.0/26                       VIRTUALIZATION
      + 10.139.0.64/27                      SERVICE
      + 10.139.0.96/27                      INTEGRATION CLUSTER 01
      ...

    - 10.139.16.0/20                        Location DC Berlin 02
      .
      .
      .

  - 10.184.202.0/22                         Subnet for Atlanta location 
    ...

--- [08-ansible-overview.png] [top]
(1) generate NIPAP address if needed
(2) get full CIDR info from NIPAP
(3) register machine in IPA

--- [08-ansible-overview.png] [top]
(4) update cobbler profiles
(5) trigger initial boot
(6) machine joins Salt

--- [09-gears.jpg] [left] [font=monospace 24px]
 - <span foreground='red'>name: "Register host in nipap"</span>
   shell: next-host.sh -e -y {{ host_name }} {{ host_net | upper }}
   delegate_to: "{{ nipap_server }}"


 TODO: does nipap's own allocator even apply?


 - <span foreground='red'>name: "Get base address information from nipap"</span>
   shell: nipap address list -c node,prefix | grep {{ host_name }}
   register: nipap_info
   <span foreground='grey'>changed_when: False
   failed_when: nipap_info is failed or nipap_info.stdout == ""
   check_mode: no</span>

 - <span foreground='red'>name: "Get vlan from nipap"</span>
   shell: nipap address view {{ <span foreground='green'>address</span> }} vrf {{ host_vrf }} 
                                     | awk '/VLAN/ { print $3 }'
   register: vlan
   vars:
     address: <span foreground='green'>{{ nipap_info.stdout | ipaddr('network/prefix') }}</span>
   <span foreground='grey'>changed_when: False
   check_mode: no</span>


--- [10-gears.jpg] [left] [font=monospace 24px]
 - name: "mkiso_sles: Create autoyast bootcd with mksusecd"
   command: >
     mksusecd
       --create {{ boot_iso_path }}
       --nano --uefi --gpt
        -boot "{{ <span foreground='red'>boot_params</span> }}" {{ suma_iso_path }}
   vars:
     <span foreground='green'>ifcfg_option</span>: >-
       {{ iface }}={{ cidr }},{{ gateway }},{{ nameserver }},{{ domain }}
     <span foreground='red'>boot_params</span>: >-
       ksdevice=bootif lang=en_US pt.options=+self_update
       install={{ cobbler_dist_url }}
       hostname={{ host_name_short }}
       self_update=0 text autoyast={{ cobbler_kickstart_url }}
       ksdevice=bootif textmode=1
       <span foreground='cyan'>{% if machine_category == 'HW' %}
       biosdevname=1
       {% endif %}</span>
       ifcfg={{ <span foreground='green'>ifcfg_option</span> }}


--- [11-gears.jpg] [left] [font=monospace 24px]
 # virtual machine: create from scratch

 - name: "install_vm: Create VM using govc"
   environment:
     GOVC_USERNAME: "{{ vcenter.user }}"
     GOVC_PASSWORD: "{{ vcenter.password }}"
   command: >
     <span foreground='yellow'>govc vm.create</span>
       -k=true -debug -u '{{ vcenter.host | quote }}' -on=false
       -m={{ vm_memory | quote }}
       -c={{ vm_cpus | quote }}
       ...
       -iso={{ bootiso_name | quote }}
       -iso-datastore={{ vm_isostore | quote }}
       {{ host_name_short | quote }}

 # for additional disks
 - name: "install_vm: Query govc for information about the new VM"
   command: govc vm.info ...
 - name: "install_vm: Add data disk volume using govc"
   command: <span foreground='yellow'>govc vm.disk.create</span> ...

--- [12-engine.jpg] [left] [font=monospace 24px]
 # hardware: make it reboot
 - name: "install_hw: add {{ ilo_host_name }} to inventory"
   add_host:
     hostname: "{{ <span foreground='red'>ilo_host_name</span> }}"
     ansible_host: "{{ ilo_host_name }}"
     ansible_port: 22
     ansible_user: "{{ ilo.user }}"
     ansible_ssh_pass: "{{ ilo.password }}"
   no_log: True

 - name: "install_hw: set iLO server name"
   <span foreground='cyan'>raw: set /system1 oemHPE_server_name={{ host_name_short }}</span>
   delegate_to: "{{ <span foreground='red'>ilo_host_name</span> }}"

 - name: "install_hw: Power off system"
   shell: >
     <span foreground='yellow'>/usr/sbin/ilorest reboot PressAndHold</span>
     --url {{ <span foreground='red'>ilo_host_name</span> }}
     -u {{ ilo.user }} -p {{ ilo.password | quote }}

 - name: "install_hw: Create Raid1 on OS disks"
   ...
 - name: "install_hw: Mount boot iso image"
   ...
 - name: "install_hw: Boot system"
   ...

--- [13-mesh.jpg]
salt hand-off

--- [14-gears.jpg]
suma + salt

--- [15-servers.jpg]
machine definitions

--- 
variables per location

--- 
BUFFER

--- [right] [font=Sans 12px]
Photo credits

[1] Photo by Manuel Geissinger from Pexels
[4] Photo by Skitterphoto from Pexels
[5] Photo by kelvin carris from Pexels
[6] Photo by panumas nikhomkhai from Pexels
[7] Photo by Min An from Pexels
[12] Photo by Mike from Pexels
[14] Photo by Digital Buggu from Pexels
[15] Photo by Christina Morillo from Pexels
